diff --git a/Makefile b/Makefile
index e95899d..9228a2a 100644
--- a/Makefile
+++ b/Makefile
@@ -192,6 +192,7 @@ src :=  $(filter-out src/ariane_regfile.sv, $(wildcard src/*.sv))              \
         src/tech_cells_generic/src/pulp_clock_mux2.sv                          \
         tb/ariane_testharness.sv                                               \
         tb/ariane_peripherals.sv                                               \
+        tb/trace_ip.sv                                                         \
         tb/common/uart.sv                                                      \
         tb/common/SimDTM.sv                                                    \
         tb/common/SimJTAG.sv
@@ -401,7 +402,7 @@ verilate:
 	cd $(ver-library) && $(MAKE) -j${NUM_JOBS} -f Variane_testharness.mk
 
 sim-verilator: verilate
-	$(ver-library)/Variane_testharness $(elf-bin)
+	$(ver-library)/Variane_testharness $(elf-bin) | sed 's/^.*core/core/'| spike-dasm
 
 $(addsuffix -verilator,$(riscv-asm-tests)): verilate
 	$(ver-library)/Variane_testharness $(riscv-test-dir)/$(subst -verilator,,$@)
diff --git a/tb/ariane_testharness.sv b/tb/ariane_testharness.sv
index 075a305..bd24177 100644
--- a/tb/ariane_testharness.sv
+++ b/tb/ariane_testharness.sv
@@ -704,6 +704,22 @@ module ariane_testharness #(
     end
   end
 
+  logic [63:0] cycles;
+  always_ff @(posedge clk_i or negedge ndmreset_n) begin
+    if (~ndmreset_n) begin
+      cycles <= 0;
+    end else begin
+      cycles <= cycles+1;
+    end
+  end
+
+  trace_ip  #(
+    .InclSimDTM(InclSimDTM),
+    .SIM_FINISH(1000000)
+  ) trace_ip_i (
+    .cycles(cycles)
+  ) ;
+
 `ifdef AXI_SVA
   // AXI 4 Assertion IP integration - You will need to get your own copy of this IP if you want
   // to use it
diff --git a/tb/trace_ip.sv b/tb/trace_ip.sv
new file mode 100644
index 0000000..aebecac
--- /dev/null
+++ b/tb/trace_ip.sv
@@ -0,0 +1,121 @@
+//#############################################################################
+//#
+//# Copyright 2020 Thales
+//#
+//# Licensed under the Solderpad Hardware Licence, Version 2.0 (the "License");
+//# you may not use this file except in compliance with the License.
+//# You may obtain a copy of the License at
+//#
+//#     https://solderpad.org/licenses/
+//#
+//# Unless required by applicable law or agreed to in writing, software
+//# distributed under the License is distributed on an "AS IS" BASIS,
+//# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+//# See the License for the specific language governing permissions and
+//# limitations under the License.
+//#
+//#############################################################################
+//#
+//# Original Author: Jean-Roch COULON (jean-roch.coulon@invia.fr)
+//#
+//#############################################################################
+
+import ariane_pkg::*;
+
+module trace_ip #(
+  parameter bit          InclSimDTM = 1'b0,
+  parameter int unsigned SIM_FINISH = 1000000
+)(
+  input logic [63:0]                    cycles
+);
+
+  // synthesis translate_off
+
+  int f;
+  logic [63:0] cycles_to_print;
+  logic [63:0] pc64;
+  logic [31:0] address_host;
+  logic [63:0] data_host;
+
+  typedef struct packed {
+    logic [DCACHE_TAG_WIDTH+DCACHE_INDEX_WIDTH-1:0] address;
+    logic [63:0] data;
+  } access_t;
+
+  access_t store, load;
+  access_t load_to_print, store_to_print;
+
+  always_ff @(posedge i_ariane.clk_i or negedge i_ariane.rst_ni) begin
+    if (~i_ariane.rst_ni) begin
+    end else begin
+      string mode = "";
+      if (i_ariane.debug_mode) mode = "D";
+      else begin
+        case (i_ariane.priv_lvl)
+        riscv::PRIV_LVL_M: mode = "M";
+        riscv::PRIV_LVL_S: mode = "S";
+        riscv::PRIV_LVL_U: mode = "U";
+        endcase
+      end
+      for (int i = 0; i < NR_COMMIT_PORTS; i++) begin
+        pc64 = i_ariane.commit_instr_id_commit[i].pc;
+        if (i_ariane.commit_ack[i] && !i_ariane.commit_instr_id_commit[i].ex.valid) begin
+          $display("%d core   0: 0x%h (0x%h) DASM(%h)",
+                cycles_to_print,
+                pc64,
+                i_ariane.commit_instr_id_commit[i].ex.tval[31:0],
+                i_ariane.commit_instr_id_commit[i].ex.tval[31:0]);
+          if (ariane_pkg::is_rd_fpr(i_ariane.commit_instr_id_commit[i].op) == 0)
+            if (i_ariane.commit_instr_id_commit[i].rd[4:0] == 0)
+              $display("%h 0x%h (0x%h)",
+                i_ariane.priv_lvl,
+                pc64,
+                i_ariane.commit_instr_id_commit[i].ex.tval[31:0]);
+            else
+              $display("%h 0x%h (0x%h) x%d 0x%h",
+                i_ariane.priv_lvl,
+                pc64,
+                i_ariane.commit_instr_id_commit[i].ex.tval[31:0],
+                i_ariane.commit_instr_id_commit[i].rd[4:0],
+                i_ariane.wdata_commit_id[i][63:0]);
+          else
+            $display("%h 0x%h (0x%h) f%d 0x%h",
+              i_ariane.priv_lvl,
+              pc64,
+              i_ariane.commit_instr_id_commit[i].ex.tval[31:0],
+              i_ariane.commit_instr_id_commit[i].rd[4:0],
+              i_ariane.commit_instr_id_commit[i].result[63:0]);
+        end else if (i_ariane.commit_instr_id_commit[i].valid && i_ariane.commit_instr_id_commit[i].ex.valid && i_ariane.ex_commit.valid) begin
+          if (i_ariane.commit_instr_id_commit[i].ex.cause == 2) begin
+          end else begin
+            if (i_ariane.debug_mode) begin
+              $display("%d 0x%0h %s (0x%h) DASM(%h)", cycles_to_print, pc64, mode, i_ariane.commit_instr_id_commit[i].ex.tval[31:0], i_ariane.commit_instr_id_commit[i].ex.tval[31:0]);
+            end else if (i_ariane.commit_instr_id_commit[i].ex.cause != 24) begin
+              $display("%d core   0: 0x%h (0x%h) DASM(%h)",
+                cycles_to_print,
+                pc64,
+                i_ariane.commit_instr_id_commit[i].ex.tval[31:0],
+                i_ariane.commit_instr_id_commit[i].ex.tval[31:0]);
+              $display("core   0: exception %5d, epc 0x%h", i_ariane.commit_instr_id_commit[i].ex.cause, pc64);
+            end
+          end
+        end
+      end
+      cycles_to_print <= cycles;
+      if (cycles > SIM_FINISH) $finish(1);
+      if (i_ariane.ex_stage_i.lsu_i.dcache_req_ports_o[2].data_req) begin
+        address_host={i_ariane.ex_stage_i.lsu_i.dcache_req_ports_o[2].address_tag[DCACHE_TAG_WIDTH-1:0],
+                      i_ariane.ex_stage_i.lsu_i.dcache_req_ports_o[2].address_index[DCACHE_INDEX_WIDTH-1:0]};
+        data_host=i_ariane.ex_stage_i.lsu_i.dcache_req_ports_o[2].data_wdata[63:0];
+        if (address_host==64'h80100000 && !InclSimDTM) begin
+          $display("write to host addr=%h data=%h", address_host, data_host);
+          $finish(0);
+        end
+      end
+    end
+  end
+
+  // synthesis translate_on
+
+endmodule // trace_ip
+
